#!/usr/bin/env ruby

require 'clamp'
require 'mprm'

class Main < Clamp::Command
  option ["-v", "--version"], :flag, "Version information"
  option ["-t", "--type"], "TYPE", "Type of repo to create"
  option ["-p", "--path"], "PATH", "Path to repo location"
  option ["-r", "--release"], "RELEASE", "OS version to create"
  option ["-a", "--arch"], "ARCH", "Architecture of repo contents"
  option ["-c", "--component"], "COMPONENT", "Component to create [DEB ONLY]"
  option ["-l", "--label"], "LABEL", "Label for generated repository [DEB ONLY]"
  option ["-o", "--origin"], "ORIGIN", "Origin for generated repository [DEB ONLY]"
  option ["--nocache"], :flag, "Don't cache md5 sums [DEB ONLY]"
  option ["-d", "--directory"], "DIRECTORY", "Move packages from directory to target", :default => false
  option ["-e", "--recent"], :flag, "Snapshot the most recent unique packages", :default => false
  option ["-k", "--gpg"], "GPG KEY",  "Sign release files with this GPG key", :default => false
  option ["-x", "--gpg_passphrase"], "GPG PASSPHRASE", "Passphrase for GPG key", :default => false
  option ["-n", "--gpg_sign_algorithm"], "GPG SIGN ALGORITHM", "Digest algorithm to use for signing (e.g SHA1, SHA512, etc)", :default => "sha256"

  def execute
    if version?
      puts "MPRM version: #{MPRM::VERSION}"
      exit
    end

    unless type && path && release && arch
      puts "Type, Path, Release and Arch are required arguments"
      exit
    end

    if recent? && !snapshot
      raise "--snapshot is required for --recent"
    end

    if type == "deb" && !component
      raise "--deb option required for the --component option!"
    end

    r = MPRM::Repo.new
    r.release = release
    r.arch = arch
    r.type = type
    r.path = path
    r.label = label
    r.origin = origin
    unless upload.nil?
      r.upload = upload
    end
    unless gpg.nil?
      r.gpg = gpg
      r.gpg_passphrase = gpg_passphrase
      r.gpg_sign_algorithm = gpg_sign_algorithm
    end
    unless accesskey.nil?
      r.accesskey = accesskey
    end
    unless secretkey.nil?
      r.secretkey = secretkey
    end
    unless snapshot.nil?
      r.snapshot = snapshot
    end
    unless component.nil?
      r.component = component
    end
    if recent?
      r.recent = recent?
    end
    unless directory.nil?
      r.directory = directory
    end
    if nocache?
      r.nocache = nocache?
    end

    r.create
  end
end

Main.run
